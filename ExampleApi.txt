package com.capgemini.kycapp.api;

import com.capgemini.kycapp.contract.KycContract;
import com.capgemini.kycapp.contract.KycState;
import com.capgemini.kycapp.flow.ExampleFlow;
import com.capgemini.kycapp.model.UserKycInfo;
import net.corda.core.contracts.ContractState;
import net.corda.core.contracts.StateAndRef;
import net.corda.core.contracts.StateRef;
import net.corda.core.crypto.Party;
import net.corda.core.messaging.CordaRPCOps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import static java.util.Collections.list;
import static java.util.Collections.singletonList;
import static java.util.Collections.singletonMap;
import static java.util.stream.Collectors.toList;

// This API is accessible from /api/example. All paths specified below are relative to it.
@Path("example")
public class ExampleApi {
    private final CordaRPCOps services;
    private final String myLegalName;

    final Logger logger = LoggerFactory.getLogger(ExampleApi.class);

    public ExampleApi(CordaRPCOps services) {
        this.services = services;
        this.myLegalName = services.nodeIdentity().getLegalIdentity().getName();
    }

    /**
     * Returns the party name of the node providing this end-point.
     */
    @GET
    @Path("me")
    @Produces(MediaType.APPLICATION_JSON)
    public Map<String, String> whoami() { return singletonMap("me", myLegalName); }

    /**
     * Returns all parties registered with the [NetworkMapService]. The names can be used to look up identities by
     * using the [IdentityService].
     */
    @GET
    @Path("peers")
    @Produces(MediaType.APPLICATION_JSON)
    public Map<String, List<String>> getPeers() {
        final String NOTARY_NAME = "Controller";
        return singletonMap(
                "peers",
                services.networkMapUpdates().getFirst()
                        .stream()
                        .map(node -> node.getLegalIdentity().getName())
                        .filter(name -> !name.equals(myLegalName) && !name.equals(NOTARY_NAME))
                        .collect(toList()));
    }

    /**
     * Displays all purchase order states that exist in the vault.
     */
    @GET
    @Path("kyc-docs")
    @Produces(MediaType.APPLICATION_JSON)
    public List<StateAndRef<ContractState>> getKycDocs()
    {
        return services.vaultAndUpdates().getFirst();
    }


   
    @PUT
    @Path("{party}/CreateKycDoc")
    public Response createCreateKycDoc(UserKycInfo userKycInfo, @PathParam("party") String partyName)
            throws InterruptedException, ExecutionException
    {
        final Party otherParty = services.partyFromName(partyName);
        final Party thirdPartyC = services.partyFromName("NodeC");

        Map<String, List<String>> allPeers = getPeers();

        Party Initiator  = services.nodeIdentity().getLegalIdentity();
        List<String> allStrNodes = allPeers.get("peers");
        List<Party> otherParties = new ArrayList<>();

        if(allStrNodes!=null)
        {
            for ( String temp : allStrNodes ) {
                Party tempParty = null;
                if(temp!=null && !temp.equalsIgnoreCase("NetworkMapService"))
                {
                    tempParty = services.partyFromName(temp);
                    if(tempParty!=null)
                    {
                        otherParties.add(tempParty);
                    }
                }
            }
        }

        if (otherParty == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }

        if (thirdPartyC == null) {
            return Response.status(Response.Status.BAD_REQUEST).build();
        }

        final KycState state = new KycState(
                userKycInfo,
                services.nodeIdentity().getLegalIdentity(),
                otherParties ,
                new KycContract());

        // The line below blocks and waits for the flow to return.
        final ExampleFlow.ExampleFlowResult result =
                services.startFlowDynamic(ExampleFlow.Initiator.class, state, otherParties)
            .getReturnValue()
            .toBlocking()
            .first();

        final Response.Status status;
        if (result instanceof ExampleFlow.ExampleFlowResult.Success) {
            status = Response.Status.CREATED;
        } else {
            status = Response.Status.BAD_REQUEST;
        }

        return Response
                .status(status)
                .entity(result.toString())
                .build();
    }
}